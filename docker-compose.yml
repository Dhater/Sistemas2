services:

  # Base de datos PostgreSQL
  database:
    build: ./Database
    container_name: yahoo_database
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_HOST_AUTH_METHOD=trust
    volumes:
      - database_volume:/var/lib/postgresql/data
      - dataset_volume:/data
      - ./Database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - yahoo_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  descarga-dataset:
    build: ./Descarga_Dataset
    container_name: yahoo_descarga_dataset
    profiles: ["manual"]
    volumes:
      - dataset_volume:/data
      - ./local_data:/data
    environment:
      - KAGGLE_USERNAME=${KAGGLE_USERNAME}
      - KAGGLE_KEY=${KAGGLE_KEY}
    networks:
      - yahoo_network
    depends_on:
      database:
        condition: service_healthy

  cache:
    image: redis:7-alpine
    container_name: yahoo_cache
    command: redis-server --maxmemory 52428800 --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    networks:
      - yahoo_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  cache-manager:
    build: ./Cache
    container_name: yahoo_cache_manager
    profiles: ["manual"]
    environment:
      - REDIS_HOST=cache
    depends_on:
      cache:
        condition: service_healthy
    networks:
      - yahoo_network

  pruebas:
    build: ./LLM_Client
    container_name: Contestador_Base
    profiles: ["manual"]
    volumes:
      - ./LLM_Client:/app
      - ./local_data:/data
    env_file:
      - .env
    networks:
      - yahoo_network

  generador-trafico:
    build: ./Generador_Trafico
    container_name: yahoo_generador_trafico
    volumes:
      - ./local_data:/data
      - ./Generador_Trafico:/app
    env_file:
      - .env
    depends_on:
      database:
        condition: service_healthy
      cache:
        condition: service_healthy
    networks:
      - yahoo_network

  llm-client:
    build:
      context: ./prueba
    container_name: API_CLIENT
    volumes:
      - ./prueba:/app
      - ./local_data:/data
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      database:
        condition: service_healthy
      cache:
        condition: service_healthy
    restart: "no"
    networks:
      - yahoo_network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: yahoo_zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - yahoo_network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: yahoo_kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
    networks:
      - yahoo_network
    volumes:
      - ./kafka-init.sh:/usr/local/bin/kafka-init.sh
    command: ["/bin/bash", "-c", "(/usr/local/bin/kafka-init.sh &) && /etc/confluent/docker/run"]


  flink-jobmanager:
    image: flink:1.19-scala_2.12
    container_name: yahoo_flink_jobmanager
    command: jobmanager
    environment:
      - JOB_MANAGER_RPC_ADDRESS=flink-jobmanager
    ports:
      - "8081:8081"
    networks:
      - yahoo_network

  flink-taskmanager:
    image: flink:1.19-scala_2.12
    container_name: yahoo_flink_taskmanager
    command: taskmanager
    environment:
      - JOB_MANAGER_RPC_ADDRESS=flink-jobmanager
    depends_on:
      - flink-jobmanager
    networks:
      - yahoo_network

  flink-reprocessor:
    build: ./FlinkReprocessor
    container_name: flink_reprocessor
    depends_on:
      - kafka
    networks:
      - yahoo_network

volumes:
  dataset_volume:
    driver: local
  database_volume:
    driver: local

networks:
  yahoo_network:
    driver: bridge
